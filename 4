#include "ns3/command-line.h"

#include "ns3/config.h"

#include "ns3/double.h"

#include "ns3/string.h"

#include "ns3/log.h"

#include "ns3/yans-wifi-helper.h"

#include "ns3/mobility-helper.h"

#include "ns3/mobility-module.h"

#include "ns3/ipv4-address-helper.h"

#include "ns3/yans-wifi-channel.h"

#include "ns3/mobility-model.h"

#include "ns3/internet-stack-helper.h"

#include "ns3/core-module.h"

#include "ns3/network-module.h"

#include "ns3/internet-module.h"

#include "ns3/point-to-point-module.h"

#include "ns3/applications-module.h"

#include "ns3/traffic-control-module.h"

#include "ns3/flow-monitor-module.h"

using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("WifiSimpleAdhoc");

void ReceivePacket (Ptr<Socket> socket)

{

while (socket->Recv ())

{

NS_LOG_UNCOND ("Received one packet!");

}

}

static void GenerateTraffic (Ptr<Socket> socket, uint32_t pktSize,

uint32_t pktCount, Time pktInterval )

{

if (pktCount > 0)

{

socket->Send (Create<Packet> (pktSize));

Simulator::Schedule (pktInterval, &GenerateTraffic,

socket, pktSize,pktCount - 1, pktInterval);

}

else

{

socket->Close ();

}

}

int main (int argc, char *argv[])

{

std::string phyMode ("DsssRate1Mbps");

double rss = -80; // -dBm

double simulationTime = 10; //seconds

std::string transportProt = "Tcp";

std::string socketType= "ns3::UdpSocketFactory";

// Fix non-unicast data rate to be the same as that of unicast

Config::SetDefault ("ns3::WifiRemoteStationManager::NonUnicastMode",

StringValue (phyMode));

NodeContainer c;

c.Create (5);//changed from 2

// The below set of helpers will help us to put together the wifi NICs we want

WifiHelper wifi;

wifi.SetStandard (WIFI_STANDARD_80211b);

YansWifiPhyHelper wifiPhy;

// This is one parameter that matters when using FixedRssLossModel

// set it to zero; otherwise, gain will be added

wifiPhy.Set ("RxGain", DoubleValue (0) );

// ns-3 supports RadioTap and Prism tracing extensions for 802.11b

wifiPhy.SetPcapDataLinkType (WifiPhyHelper::DLT_IEEE802_11_RADIO);

YansWifiChannelHelper wifiChannel;

wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");

// The below FixedRssLossModel will cause the rss to be fixed regardless

// of the distance between the two stations, and the transmit power

wifiChannel.AddPropagationLoss ("ns3::FixedRssLossModel","Rss",DoubleValue (rss));

wifiPhy.SetChannel (wifiChannel.Create ());

// Add a mac and disable rate control

WifiMacHelper wifiMac;

wifi.SetRemoteStationManager ("ns3::ConstantRateWifiManager",

"DataMode",StringValue (phyMode),

"ControlMode",StringValue (phyMode));

// Set it to adhoc mode

wifiMac.SetType ("ns3::AdhocWifiMac");

NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);

// Note that with FixedRssLossModel, the positions below are not

// used for received signal strength.

/*MobilityHelper mobility;

Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();

positionAlloc->Add (Vector (0.0, 0.0, 0.0));

positionAlloc->Add (Vector (5.0, 0.0, 0.0));

mobility.SetPositionAllocator (positionAlloc);

mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");

mobility.Install (c);*/

//copy mobil

MobilityHelper mobility;

mobility.SetPositionAllocator ("ns3::GridPositionAllocator",

"MinX", DoubleValue (0.0),

"MinY", DoubleValue (0.0),

"DeltaX", DoubleValue (5.0),

"DeltaY", DoubleValue (10.0),

"GridWidth", UintegerValue (3),

"LayoutType", StringValue ("RowFirst"));

mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",

"Bounds", RectangleValue (Rectangle (-50, 50, -50, 50)));

mobility.Install (c);

InternetStackHelper internet;

internet.Install (c);

Ipv4AddressHelper ipv4;

NS_LOG_INFO ("Assign IP Addresses.");

ipv4.SetBase ("10.1.1.0", "255.255.255.0");

Ipv4InterfaceContainer i = ipv4.Assign (devices);

//Flow

uint16_t port = 7;

Address localAddress (InetSocketAddress (Ipv4Address::GetAny (), port));

PacketSinkHelper packetSinkHelper (socketType, localAddress);

ApplicationContainer sinkApp = packetSinkHelper.Install (c.Get (4));

sinkApp.Start (Seconds (0.0));

sinkApp.Stop (Seconds (simulationTime + 0.1));

uint32_t payloadSize = 1448;

Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue (payloadSize));

OnOffHelper onoff (socketType, Ipv4Address::GetAny ());

onoff.SetAttribute ("OnTime", StringValue ("ns3::ConstantRandomVariable[Constant=1]"));

onoff.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]"));

onoff.SetAttribute ("PacketSize", UintegerValue (payloadSize));

onoff.SetAttribute ("DataRate", StringValue ("50Mbps")); //bit/s

ApplicationContainer apps;

InetSocketAddress rmt (i.GetAddress (3), port);

rmt.SetTos (0xb8);

AddressValue remoteAddress (rmt);

onoff.SetAttribute ("Remote", remoteAddress);

apps.Add (onoff.Install (c.Get (1)));

apps.Start (Seconds (1.0));

apps.Stop (Seconds (simulationTime + 0.1));

FlowMonitorHelper flowmon;

Ptr<FlowMonitor> monitor = flowmon.InstallAll();

Simulator::Stop (Seconds (simulationTime + 5));

Simulator::Run ();

Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());

std::map<FlowId, FlowMonitor::FlowStats> stats = monitor->GetFlowStats ();

std::cout << std::endl << "*** Flow monitor statistics ***" << std::endl;

std::cout << " Tx Packets/Bytes: " << stats[1].txPackets<< " / " << stats[1].txBytes << std::endl;

std::cout << " Rx Packets/Bytes: " << stats[1].rxPackets<< " / " << stats[1].rxBytes << std::endl;

Simulator::Destroy ();

return 0;

}
